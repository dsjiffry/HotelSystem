/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package hotelsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Shehan
 */
public class Form_Reservation2 extends javax.swing.JFrame {

    /**
     * Creates new form Reservation
     */
    
    private Connection connection = null;
    private Statement statement = null;
    private ResultSet resultSet = null;
    private final String url = HotelSystem.getProperties("db.url");
    private final String user = HotelSystem.getProperties("db.user");
    private final String password = HotelSystem.getProperties("db.password");
    private final String driver = HotelSystem.getProperties("db.driver");
    
    private Guest G;
    private int Rfloor = 1;
    private String Rtype = "Single";
    
    public Form_Reservation2(Guest G) {
        initComponents();
        advanceCC.setEnabled(false);
        advanceCash.setEnabled(false);
        advanceCC.setVisible(false);
        advanceCash.setVisible(false);
        try
        {
            Class.forName(driver);
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();
            
            
        } catch (Exception ex)
        {
            Logger.getLogger(Form_CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        this.G=G;
        Calendar c = StartDate.getMonthView().getCalendar();
        c.setTime(new Date());
        StartDate.getMonthView().setLowerBound(c.getTime());
        
        c.add(Calendar.DATE,1);
        EndDate.getMonthView().setLowerBound(c.getTime());
        EndDate.setEnabled(false);
        jComboBox1.setEnabled(false);
    }

    public Form_Reservation2() {
        initComponents();
        advanceCC.setEnabled(false);
        advanceCash.setEnabled(false);
        advanceCC.setVisible(false);
        advanceCash.setVisible(false);
        try
        {
            Class.forName(driver);
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();
            
            
        } catch (Exception ex)
        {
            Logger.getLogger(Form_CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        Calendar c = StartDate.getMonthView().getCalendar();
        c.setTime(new Date());
        StartDate.getMonthView().setLowerBound(c.getTime());
        
        c.add(Calendar.DATE,1);
        EndDate.getMonthView().setLowerBound(c.getTime());
        EndDate.setEnabled(false);
        jComboBox1.setEnabled(false);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel2 = new javax.swing.JPanel();
        GSubmit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        RType = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        StartDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel8 = new javax.swing.JLabel();
        EndDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        advanceCC = new javax.swing.JCheckBox();
        advanceCash = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(37, 47, 65));

        jPanel2.setBackground(new java.awt.Color(50, 50, 86));
        jPanel2.setToolTipText("");
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        GSubmit.setBackground(new java.awt.Color(100, 255, 218));
        GSubmit.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        GSubmit.setText("Calculate");
        GSubmit.setToolTipText("");
        GSubmit.setBorder(null);
        GSubmit.setBorderPainted(false);
        GSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GSubmitActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Room Type:");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reservation");

        String url = "jdbc:mysql://localhost:3306/hotelsystem";
        String user = "root";
        String password = "";
        String driver = "com.mysql.jdbc.Driver";
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        int num2 = 0;
        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT COUNT(DISTINCT type) AS 'types' FROM room";
            resultSet = statement.executeQuery(sql);
            while(resultSet.next())
            {
                num2=resultSet.getInt("types");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        String type[] = new String[num2];

        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT DISTINCT type FROM room";
            resultSet = statement.executeQuery(sql);
            int i = 0;
            while(resultSet.next())
            {
                type[i]=resultSet.getString("type");
                i = i + 1;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        RType.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        RType.setModel(new javax.swing.DefaultComboBoxModel<>(type));
        RType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RTypeActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(100, 255, 218));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton1.setText("‚Üê");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        StartDate.setBackground(new java.awt.Color(255, 255, 255));
        StartDate.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        StartDate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                StartDateActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Start Date:");

        EndDate.setBackground(new java.awt.Color(255, 255, 255));
        EndDate.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        EndDate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                EndDateActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("End Date:");

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Number of Rooms:");

        jComboBox1.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox1ActionPerformed(evt);
            }
        });

        advanceCC.setBackground(new java.awt.Color(50, 50, 86));
        advanceCC.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        advanceCC.setForeground(new java.awt.Color(255, 255, 255));
        advanceCC.setText("Credit Card");
        advanceCC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        advanceCC.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                advanceCCActionPerformed(evt);
            }
        });

        advanceCash.setBackground(new java.awt.Color(50, 50, 86));
        advanceCash.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        advanceCash.setForeground(new java.awt.Color(255, 255, 255));
        advanceCash.setText("Cash");
        advanceCash.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        advanceCash.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                advanceCashActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EndDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(advanceCash, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(advanceCC, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(StartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(GSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(StartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advanceCC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(advanceCash))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(GSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSubmitActionPerformed
        
        if(RType.getSelectedItem()==null)
        {
            Form_Alerts A = new Form_Alerts("Please select a Room type");
            A.setVisible(true);
            A.setDefaultCloseOperation(0);
            A.setVisible(true);
            A.setLocationRelativeTo(this);
            return;
        }
        if(jComboBox1.getSelectedItem()==null)
        {
            Form_Alerts A = new Form_Alerts("Please select number of Rooms");
            A.setVisible(true);
            A.setDefaultCloseOperation(0);
            A.setVisible(true);
            A.setLocationRelativeTo(this);
            return;
        }
        if(StartDate.getDate()==null)
        {
            Form_Alerts A = new Form_Alerts("Please select a starting date");
            A.setVisible(true);
            A.setDefaultCloseOperation(0);
            A.setVisible(true);
            A.setLocationRelativeTo(this);
            return;
        }
        if(EndDate.getDate()==null)
        {
            Form_Alerts A = new Form_Alerts("Please select a Ending date");
            A.setVisible(true);
            A.setDefaultCloseOperation(0);
            A.setVisible(true);
            A.setLocationRelativeTo(this);
            return;
        }
        
        double amount = 0;
        int room = 0;
        int numberOfRooms = Integer.valueOf(String.valueOf(jComboBox1.getSelectedItem()));
        
        
        
        if(GSubmit.getText().equalsIgnoreCase("Calculate"))
        {
            for(int i=0;i<numberOfRooms;i++)
                {
                    double temp= 0;
                    try
                      {
                     
                    
                    String sql3 ="SELECT number,price FROM room WHERE Booked=0 AND type ='"+Rtype+"' ORDER BY number DESC";
                    resultSet = statement.executeQuery(sql3);
                    while(resultSet.next())
                    {
                        temp = resultSet.getDouble("price");
                        break;
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
                    
                    
                    amount = amount + temp;
                }
                    Date start = StartDate.getDate();
                    Date End = EndDate.getDate();
                    long days = End.getTime()-start.getTime();
                    days = TimeUnit.DAYS.convert(days, TimeUnit.MILLISECONDS);
                    
                    amount = amount*days;
            
            
            jLabel11.setText("Advance due is "+amount*0.25);
            GSubmit.setText("Submit");
            return;
        }
        
        
        

        
        
        
        

        
        
        Date start = StartDate.getDate();
        Date End = EndDate.getDate();
        long days = End.getTime()-start.getTime();
        days = TimeUnit.DAYS.convert(days, TimeUnit.MILLISECONDS);
        
        
        try {
			DriverManager.registerDriver(new com.mysql.jdbc.Driver());
			}
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		                
                String sql = "INSERT INTO guest(name,type,number,email) VALUES(?,?,?,?)";
		try 
		{
			
			PreparedStatement pst = connection.prepareStatement(sql);
			pst.setString(1,G.getName());
			pst.setString(2,G.getType());
			pst.setString(3,G.getNumber());
			pst.setString(4,G.getEmail());
                        
			pst.executeUpdate();
		}
		catch(SQLException e)
		{
			System.out.println(e.getMessage()); 
		}
                
                
                int id=0;
                try
                      {
                       

                    String sql3 ="SELECT id FROM guest WHERE type='"+G.getType()+"' AND number='"+G.getNumber()+"'";
                    resultSet = statement.executeQuery(sql3);
                    while(resultSet.next())
                    {
                        id=resultSet.getInt("id");
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
        
               
                java.sql.Date ss = new java.sql.Date(start.getTime());
                java.sql.Date ee = new java.sql.Date(End.getTime());
                
                
                
                
                String sql4 = "INSERT INTO bookings(type,paid,numberofRooms,amount,startDate,endDate,guestID,today) VALUES(?,?,?,0,?,?,?,0)";
                try
                    {
                        PreparedStatement pst = connection.prepareStatement(sql4);
                        pst.setString(1,Rtype);
                        pst.setInt(2,0);
                        pst.setInt(3,numberOfRooms);
                        pst.setDate(4, ss);
                        pst.setDate(5, ee);
                        pst.setInt(6, id);
                   
                        pst.executeUpdate();
                    }
                    catch(SQLException e)
                    {
                            System.out.println(e.getMessage());
                    }
                
                int BID = 0;
                try
                      {
                       

                    String sql3 ="SELECT id FROM bookings WHERE type='"+Rtype+"' AND guestID='"+id+"' AND StartDate='"+ss+"' AND EndDate='"+ee+"'";
                    resultSet = statement.executeQuery(sql3);
                    while(resultSet.next())
                    {
                        BID=resultSet.getInt("id");
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
                
                
                
                
                
                
                
                
                
                double discount = 0;
                
                 for(int i=0;i<numberOfRooms;i++)
                {
                    double temp= 0;
                    
                    try
                      {
                       
                     
                    
                    String sql3 ="SELECT number,price,discount FROM room WHERE Booked=0 AND type ='"+Rtype+"' ORDER BY number DESC";
                    resultSet = statement.executeQuery(sql3);
                    while(resultSet.next())
                    {
                        room=resultSet.getInt("number");
                        temp = resultSet.getDouble("price");
                        discount = resultSet.getDouble("discount");
                        break;
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
                    G.setRoomNo(room);
                    amount = amount + temp;
                    if(start.getTime()-new Date().getTime() <=55000000)
                    {
                        String sql2 = "UPDATE room SET Booked = 1, GuestID = "+id+", BookingID="+BID+" WHERE number="+G.getRoomNo();
                        String sql3 = "UPDATE bookings SET today = 1 WHERE id="+BID;
                        try
                        {
                            PreparedStatement pst = connection.prepareStatement(sql2);
                            pst.executeUpdate();
                            
                            PreparedStatement pst2 = connection.prepareStatement(sql3);
                            pst2.executeUpdate();
                        }
                        catch(SQLException e)
                        {
                                System.out.println(e.getMessage());
                        }
                    }
                }
                
                int PID = 0;
                
                amount = amount*days;
                java.sql.Date today = new java.sql.Date(new Date().getTime());
                String sql5 = "INSERT INTO payment(amount,type,GuestID,discount,date) "
                        + "VALUES ("+(amount*0.25)+",'Advance',"+id+",0,'"+today+"')";
                try
                    {
                        PreparedStatement pst = connection.prepareStatement(sql5);
                        pst.executeUpdate();
                    }
                    catch(SQLException e)
                    {
                            System.out.println(e.getMessage());
                    }
                
                amount = amount - (amount*(discount/100));
                
                try
                      {                  
                    
                    String sql6 ="SELECT id FROM payment WHERE GuestID = "+id;
                    resultSet = statement.executeQuery(sql6);
                    while(resultSet.next())
                    {
                        PID = resultSet.getInt("id");
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
                
                
                String sql3 = "UPDATE bookings SET amount="+amount+",paymentID = "+PID+" WHERE GuestID = "+id;
                try
                    {
                        PreparedStatement pst = connection.prepareStatement(sql3);
                        pst.executeUpdate();
                    }
                    catch(SQLException e)
                    {
                            System.out.println(e.getMessage());
                    }
                
                Rtype = String.valueOf(RType.getSelectedItem());
        
               
                
                
                
                
                
                
                
                
                
                
                
        
try {
Class.forName(driver);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}
       
                
                //Reports
              
             
                String url2 = "jdbc:mysql://localhost:3306/hotelreports";
                Connection con2 = null;
                int rows = 0;
                
                try
                      {
                       con2 = DriverManager.getConnection(url2,user,password);
                       statement=con2.createStatement();
                     
                    
                    String sql6 ="SELECT COUNT(ID) FROM receptionmonthlyguest WHERE GuestIDtype='"+G.getType()+"' AND GuestIDNumber='"+G.getNumber()+"'";
                    resultSet = statement.executeQuery(sql6);
                    while(resultSet.next())
                    {
                        rows = resultSet.getInt("COUNT(ID)");
                    }
                    }
                    catch (Exception e) {
                    e.printStackTrace();
                    }
                
                String month = new SimpleDateFormat("MMM-yyyy").format(start.getTime());
                
                if(rows==0)
                {
                        String sql6 = "INSERT INTO receptionmonthlyguest(GuestIDtype,GuestIDNumber,GuestEmail,month) VALUES ('"+G.getType()+"','"+G.getNumber()+"','"+G.getEmail()+"','"+month+"')";
                        try
                        {                        
                            PreparedStatement pst = con2.prepareStatement(sql6);
                            pst.executeUpdate();
                        }
                        catch(SQLException e)
                        {
                                System.out.println(e.getMessage());
                        }
                        
                        
                        
                }
                    String sql7 = "UPDATE receptionmonthlyguest SET NoOfVisits = NoOfVisits + 1 ,NoOfDaysTotal = NoOfDaysTotal + "+days+" "
                                 + ", NoOfRoomsTotal = NoOfRoomsTotal + "+numberOfRooms+" "
                                 + "WHERE GuestIDtype = '"+G.getType()+"' AND GuestIDNumber='"+G.getNumber()+"' "
                            + "AND month='"+month+"'";
                    try
                        {                        
                            PreparedStatement pst = con2.prepareStatement(sql7);
                            pst.executeUpdate();
                        }
                        catch(SQLException e)
                        {
                                System.out.println(e.getMessage());
                        }
                
                
                
               
                
                
                
                
        Form_RConfirm RC = new Form_RConfirm(this);
        RC.setDefaultCloseOperation(0);
        RC.setVisible(true);
        RC.setLocationRelativeTo(this);
    }//GEN-LAST:event_GSubmitActionPerformed

    public void clear()
    {
        RType.setSelectedItem(null);
        EndDate.setDate(null);
        StartDate.setDate(null);
        jComboBox1.setSelectedItem(null);
        EndDate.setEnabled(false);
        jComboBox1.setEnabled(false);
        jLabel11.setText("");
        advanceCC.setSelected(false);
        advanceCash.setSelected(false);
    }
    
    private void RTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RTypeActionPerformed
        Rtype = String.valueOf(RType.getSelectedItem());
        
        int num = 0;
        try{


        String sql ="SELECT COUNT(number) FROM room WHERE Booked=0 AND type ='"+Rtype+"' AND number LIKE '"+Rfloor+"%'";
        resultSet = statement.executeQuery(sql);
        while(resultSet.next())
        {
            num=resultSet.getInt("COUNT(number)");
        }
        }
        catch (Exception e) {
        e.printStackTrace();
        }
        String room[] = new String[num];
        String sql2;
        try{

          sql2 ="SELECT number FROM room WHERE Booked = 0 AND type ='"+Rtype+"' AND number LIKE '"+Rfloor+"%'";

        resultSet = statement.executeQuery(sql2);
        int i=0;
        while(resultSet.next())
        {  
            room[i] = String.valueOf(resultSet.getInt("number"));
            i = i + 1;
        }
        }
        catch (Exception e) {
        e.printStackTrace();
        }
        GSubmit.setText("Calculate");
        StartDate.setDate(null);
        EndDate.setEnabled(false);
        jComboBox1.setEnabled(false);
    }//GEN-LAST:event_RTypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Form_Reservation1 R = new Form_Reservation1();
        R.setVisible(true);
        R.setLocationRelativeTo(this);
        R.setExtendedState(this.getExtendedState());
        R.setText(G.getName(),G.getNumber(),G.getType(),G.getEmail());
        this.setVisible(false);
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void StartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartDateActionPerformed
         
        EndDate.getMonthView().setLowerBound(StartDate.getMonthView().getSelectionDate());
        EndDate.setEnabled(true);
        EndDate.setDate(null);
      //  jComboBox1.setEnabled(true);
        GSubmit.setText("Calculate");
        
        
        
        
        
    }//GEN-LAST:event_StartDateActionPerformed

    private void EndDateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_EndDateActionPerformed
    {//GEN-HEADEREND:event_EndDateActionPerformed
        if(EndDate.getMonthView().getSelectionDate().equals(StartDate.getMonthView().getSelectionDate()))
        {
            Form_Alerts A = new Form_Alerts("Guest Must stay for at least one night.");
            A.setVisible(true);
            A.setDefaultCloseOperation(0);
            A.setVisible(true);
            A.setLocationRelativeTo(this);
            EndDate.setDate(null);
            return;
        }
        
        
        jComboBox1.setEnabled(true);
        java.sql.Date start = new java.sql.Date(StartDate.getDate().getTime());
      //  int numberOfRooms = Integer.valueOf(String.valueOf(jComboBox1.getSelectedItem()));
     //   int Rooms = 0;
        
        String type = (String) RType.getSelectedItem();
        int noOfRooms = 0;
        int taken = 0;
        
        try
        {
            
            
        
            String sql = "SELECT COUNT(number) FROM room WHERE type='"+type+"' ";
            resultSet = statement.executeQuery(sql);
            while(resultSet.next())
            {
                noOfRooms = resultSet.getInt("COUNT(number)");
            }
            
            String sql2 = "SELECT SUM(numberofRooms) FROM bookings WHERE type='"+type+"' AND '"+start+"' BETWEEN startDate AND endDate";
            resultSet = statement.executeQuery(sql2);
            while(resultSet.next())
            {
                taken = resultSet.getInt("SUM(numberofRooms)");
            }
            
            
            if(noOfRooms-taken<=0)
            {
                Form_Alerts A = new Form_Alerts("There are no free rooms of that type.");
                A.setVisible(true);
                A.setDefaultCloseOperation(0);
                A.setVisible(true);
                A.setLocationRelativeTo(this);
                GSubmit.setText("Calculate");
                StartDate.setDate(null);
                EndDate.setEnabled(false);
                jComboBox1.setEnabled(false);
                return;
            
            }
            String rm[] = new String[(noOfRooms-taken)];
            
            for(int i = 0;i<((noOfRooms-taken));i++)
            {
                rm[i] = ""+(i+1);
            }
            
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(rm));

        
        
        
        
        
        
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        
           /* 
            String SQL = "SELECT COUNT(number) FROM room WHERE type='"+Rtype+"'";
            
            try{
                resultSet = statement.executeQuery(SQL);
                while(resultSet.next())
                {
                    Rooms = resultSet.getInt("COUNT(number)");
                }
                
                
                String SQL2 = "SELECT SUM(numberofRooms) FROM bookings WHERE type='"+Rtype+"' "
                    + "AND '"+start+"' BETWEEN bookings.startDate AND bookings.endDate";
                
                
                
                resultSet = statement.executeQuery(SQL2);
                while(resultSet.next())
                {
                    if(resultSet.getInt("SUM(numberofRooms)")==0)
                    {
                        if(numberOfRooms>Rooms)
                        {
                            Form_Alerts A = new Form_Alerts("There are only "+Rooms+" "+Rtype+" rooms");
                            A.setDefaultCloseOperation(0);
                            A.setVisible(true);
                            A.setLocationRelativeTo(this);
                            jComboBox1.setSelectedItem(null);
                            EndDate.setDate(null);
                            EndDate.setEnabled(false);
                            return;
                        }
                    }
                    else if(resultSet.getInt("SUM(numberofRooms)")>=Rooms)
                    {
                        Form_Alerts A = new Form_Alerts("There are only "+(resultSet.getInt("SUM(numberofRooms)")-Rooms)+" "+Rtype+" rooms");
                        A.setDefaultCloseOperation(0);
                        A.setVisible(true);
                        A.setLocationRelativeTo(this);
                        jComboBox1.setSelectedItem(null);
                        EndDate.setDate(null);
                        EndDate.setEnabled(false);
                        return;
                    }
                }
                }
            catch (Exception e) {
                e.printStackTrace();
                }*/
            
        
        
        
        
        
        
        GSubmit.setText("Calculate");
        
    }//GEN-LAST:event_EndDateActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox1ActionPerformed
    {//GEN-HEADEREND:event_jComboBox1ActionPerformed
      /*  if(StartDate.getDate()!=null)
        {
            EndDate.setEnabled(true);    
            EndDate.setDate(null);        // TODO add your handling code here:
        }*/
        GSubmit.setText("Calculate");
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void advanceCashActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_advanceCashActionPerformed
    {//GEN-HEADEREND:event_advanceCashActionPerformed
        // TODO add your handling code here:
        advanceCC.setSelected(false);
    }//GEN-LAST:event_advanceCashActionPerformed

    private void advanceCCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_advanceCCActionPerformed
    {//GEN-HEADEREND:event_advanceCCActionPerformed
        // TODO add your handling code here:
        advanceCash.setSelected(false);
    }//GEN-LAST:event_advanceCCActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form_Reservation2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker EndDate;
    private javax.swing.JButton GSubmit;
    private javax.swing.JComboBox<String> RType;
    private org.jdesktop.swingx.JXDatePicker StartDate;
    private javax.swing.JCheckBox advanceCC;
    private javax.swing.JCheckBox advanceCash;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
