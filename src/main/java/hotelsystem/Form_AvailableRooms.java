/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;


/**
 *
 * @author Shehan
 */
public class Form_AvailableRooms extends javax.swing.JFrame {

    /**
     * Creates new form Form_AvailableRooms
     */
    private String Rtype = "Single";
    private int Rfloor = 1;
    public Form_AvailableRooms() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        Rooms = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        RType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        RFloor = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Rooms.setBackground(new java.awt.Color(36, 47, 65));
        Rooms.setToolTipText("");
        Rooms.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Available Rooms");

        String url = "jdbc:mysql://localhost:3306/hotelsystem";
        String user = "root";
        String password = "";
        String driver = "com.mysql.jdbc.Driver";
        try
        {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
        }
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        int num2 = 0;
        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT COUNT(DISTINCT type) AS 'types' FROM room";
            resultSet = statement.executeQuery(sql);
            while(resultSet.next())
            {
                num2=resultSet.getInt("types");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        String type[] = new String[num2];

        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT DISTINCT type FROM room";
            resultSet = statement.executeQuery(sql);
            int i = 0;
            while(resultSet.next())
            {
                type[i]=resultSet.getString("type");
                i = i + 1;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        RType.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        RType.setModel(new javax.swing.DefaultComboBoxModel<>(type));
        RType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RTypeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Room Type:");

        int rows = 0;
        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT COUNT(number) FROM room WHERE type ='"+Rtype+"'";
            resultSet = statement.executeQuery(sql);
            while(resultSet.next())
            {
                rows=resultSet.getInt("COUNT(number)");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        String RDetails [][] = new String[rows][4];

        try
        {
            connection = DriverManager.getConnection(url,user,password);
            statement=connection.createStatement();

            String sql ="SELECT * FROM room where type ='"+Rtype+"' AND number LIKE '"+Rfloor+"%'";
            resultSet = statement.executeQuery(sql);
            int i = 0;
            while(resultSet.next())
            {
                RDetails[i][0] = resultSet.getString("number");
                RDetails[i][1] = resultSet.getString("type");
                RDetails[i][2] = resultSet.getString("price");
                if(resultSet.getBoolean("Booked")==false)
                {
                    RDetails[i][3] = "Available";
                }
                else
                {
                    RDetails[i][3] = "Booked";
                }
                i = i + 1;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        jTable1.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            RDetails,
            new String []
            {
                "Room Number", "Room Type", "Price per night", "Room Status"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(97, 212, 195));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton1.setText("‚Üê");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Floor:");

        RFloor.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        RFloor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st", "2nd", "3rd", "4th" }));
        RFloor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RFloorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RoomsLayout = new javax.swing.GroupLayout(Rooms);
        Rooms.setLayout(RoomsLayout);
        RoomsLayout.setHorizontalGroup(
            RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RoomsLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(RoomsLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(RoomsLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(RType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(RFloor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RoomsLayout.setVerticalGroup(
            RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomsLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RFloor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Rooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Rooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RTypeActionPerformed
        Rtype = String.valueOf(RType.getSelectedItem());
        Rfloor = Integer.valueOf((String)RFloor.getSelectedItem());
        
        String url = "jdbc:mysql://localhost:3306/hotelsystem";
        String user = "root";
        String password = "";
        String driver = "com.mysql.jdbc.Driver";
        try
        {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
        }
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        
        int rows = 0;
try
   {
    connection = DriverManager.getConnection(url,user,password);
    statement=connection.createStatement();



    String sql ="SELECT COUNT(number) FROM room WHERE type ='"+Rtype+"'";
    resultSet = statement.executeQuery(sql);
    while(resultSet.next())
    {
        rows=resultSet.getInt("COUNT(number)");
    }
}
catch (Exception e) 
    {
    e.printStackTrace();
    }

String RDetails [][] = new String[rows][4];


try{
    connection = DriverManager.getConnection(url,user,password);
    statement=connection.createStatement();


    String sql ="SELECT * FROM room where type ='"+Rtype+"' AND number LIKE '"+Rfloor+"%'";
    resultSet = statement.executeQuery(sql);
    int i = 0;
    while(resultSet.next())
    {
        RDetails[i][0] = resultSet.getString("number");
        RDetails[i][1] = resultSet.getString("type");
        RDetails[i][2] = resultSet.getString("price");
        if(resultSet.getBoolean("Booked")==false)
        {
            RDetails[i][3] = "Available";
        }
        else
        {
            RDetails[i][3] = "Booked";
        }
        i = i + 1;
    }
}
catch (Exception e) {
e.printStackTrace();
}
jTable1.setModel(new javax.swing.table.DefaultTableModel(
    RDetails,
    new String [] {
        "Room Number", "Room Type", "Price per night", "Room Status"
    }
) {
    boolean[] canEdit = new boolean [] {
        false, false, false, false
    };

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});

        
        
    }//GEN-LAST:event_RTypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Form_Reservation1 R = new Form_Reservation1();
        R.setVisible(true);
        R.setTab(1);
        R.setLocationRelativeTo(this);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void RFloorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RFloorActionPerformed
        Rtype = String.valueOf(RType.getSelectedItem());
        Rfloor = Integer.valueOf((String)RFloor.getSelectedItem());
        
        String url = "jdbc:mysql://localhost:3306/hotelsystem";
        String user = "root";
        String password = "";
        String driver = "com.mysql.jdbc.Driver";
        try
        {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
        }
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        
        int rows = 0;
try
   {
    connection = DriverManager.getConnection(url,user,password);
    statement=connection.createStatement();



    String sql ="SELECT COUNT(number) FROM room WHERE type ='"+Rtype+"'";
    resultSet = statement.executeQuery(sql);
    while(resultSet.next())
    {
        rows=resultSet.getInt("COUNT(number)");
    }
}
catch (Exception e) 
    {
    e.printStackTrace();
    }

String RDetails [][] = new String[rows][4];


try{
    connection = DriverManager.getConnection(url,user,password);
    statement=connection.createStatement();


    String sql ="SELECT * FROM room where type ='"+Rtype+"' AND number LIKE '"+Rfloor+"%'";
    resultSet = statement.executeQuery(sql);
    int i = 0;
    while(resultSet.next())
    {
        RDetails[i][0] = resultSet.getString("number");
        RDetails[i][1] = resultSet.getString("type");
        RDetails[i][2] = resultSet.getString("price");
        if(resultSet.getBoolean("Booked")==false)
        {
            RDetails[i][3] = "Available";
        }
        else
        {
            RDetails[i][3] = "Booked";
        }
        i = i + 1;
    }
}
catch (Exception e) {
e.printStackTrace();
}
jTable1.setModel(new javax.swing.table.DefaultTableModel(
    RDetails,
    new String [] {
        "Room Number", "Room Type", "Price per night", "Room Status"
    }
) {
    boolean[] canEdit = new boolean [] {
        false, false, false, false
    };

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});
    }//GEN-LAST:event_RFloorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_AvailableRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_AvailableRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_AvailableRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_AvailableRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form_AvailableRooms().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> RFloor;
    private javax.swing.JComboBox<String> RType;
    private javax.swing.JPanel Rooms;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
